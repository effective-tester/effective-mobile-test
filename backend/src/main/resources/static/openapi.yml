openapi: 3.0.0
info:
  title: Task Management System
  version: v1
  description: Документация для Task Management System
servers:
  - url: http://localhost:8080/api/v1
    description: Локальный сервер

security:
  - bearerAuth: []

paths:
  /auth/signup:
    post:
      summary: Регистрация нового пользователя
      tags:
        - Аутентификация
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
      responses:
        '201':
          description: Пользователь успешно зарегистрирован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SignUpDto'
        '400':
          description: Некорректные входные данные
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/signin:
    post:
      summary: Аутентификация пользователя
      tags:
        - Аутентификация
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Успешная аутентификация
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SignInDto'
        '400':
          description: Неверные учетные данные
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /me:
    get:
      summary: Получить информацию о текущем пользователе
      tags:
        - Пользователи
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Информация о пользователе
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDto'
        '401':
          description: Необходима аутентификация
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /tasks:
    post:
      summary: Создать новую задачу
      tags:
        - Задачи
      security:
        - bearerAuth: []
      description: |
        **Администратор** может создавать новые задачи.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateTaskRequest'
      responses:
        '201':
          description: Задача успешно создана
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskDto'
        '400':
          description: Некорректные входные данные
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Необходима аутентификация
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Доступ запрещен
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    get:
      summary: Получить список задач с фильтрацией и пагинацией
      tags:
        - Задачи
      security:
        - bearerAuth: []
      description: |
        **Администратор** может просматривать все задачи.
        **Пользователи** могут просматривать задачи, где они указаны как исполнитель.
      parameters:
        - in: query
          name: authorId
          schema:
            type: string
            format: uuid
          description: Уникальный идентификатор автора задачи
        - in: query
          name: assigneeId
          schema:
            type: string
            format: uuid
          description: Уникальный идентификатор исполнителя задачи
        - in: query
          name: operator
          schema:
            type: string
            enum:
              - AND
              - OR
            default: AND
          description: Логический оператор для фильтрации (AND | OR)
        - in: query
          name: page
          schema:
            type: integer
            default: 0
          description: Номер страницы (начиная с 0)
        - in: query
          name: size
          schema:
            type: integer
            default: 10
          description: Количество элементов на странице
        - in: query
          name: sortBy
          schema:
            type: string
            default: createdAt
          description: Поле для сортировки
        - in: query
          name: sortDir
          schema:
            type: string
            enum:
              - asc
              - desc
            default: desc
          description: Направление сортировки (asc | desc)
      responses:
        '200':
          description: Список задач
          content:
            application/json:
              schema:
                type: object
                properties:
                  content:
                    type: array
                    items:
                      $ref: '#/components/schemas/TaskDto'
                  pageable:
                    $ref: '#/components/schemas/Pageable'
                  totalElements:
                    type: integer
                    example: 100
                  totalPages:
                    type: integer
                    example: 10
                  last:
                    type: boolean
                    example: false
                  size:
                    type: integer
                    example: 10
                  number:
                    type: integer
                    example: 0
                  sort:
                    $ref: '#/components/schemas/Sort'
                  first:
                    type: boolean
                    example: true
                  numberOfElements:
                    type: integer
                    example: 10
                  empty:
                    type: boolean
                    example: false
        '400':
          description: Некорректные входные данные
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Необходима аутентификация
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /tasks/{taskId}:
    get:
      summary: Получить информацию о задаче по ID
      tags:
        - Задачи
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: taskId
          required: true
          schema:
            type: string
            format: uuid
          description: Уникальный идентификатор задачи
      responses:
        '200':
          description: Информация о задаче
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskDto'
        '401':
          description: Необходима аутентификация
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Доступ запрещен
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Задача не найдена
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    put:
      summary: Обновить существующую задачу
      tags:
        - Задачи
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: taskId
          required: true
          schema:
            type: string
            format: uuid
          description: Уникальный идентификатор задачи
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateTaskRequest'
      responses:
        '200':
          description: Задача успешно обновлена
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskDto'
        '400':
          description: Некорректные входные данные
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Необходима аутентификация
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Доступ запрещен
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Задача не найдена
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    delete:
      summary: Удалить задачу по ID
      tags:
        - Задачи
      security:
        - bearerAuth: []
      description: |
        **Администратор** может удалять любые задачи.
      parameters:
        - in: path
          name: taskId
          required: true
          schema:
            type: string
            format: uuid
          description: Уникальный идентификатор задачи
      responses:
        '204':
          description: Задача успешно удалена
        '401':
          description: Необходима аутентификация
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Доступ запрещен
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Задача не найдена
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /tasks/{taskId}/comments:
    post:
      summary: Добавить комментарий к задаче
      tags:
        - Комментарии
      security:
        - bearerAuth: []
      description: |
        **Администратор** или **Пользователь**, назначенный исполнителем задачи, может добавлять комментарии.
      parameters:
        - in: path
          name: taskId
          required: true
          schema:
            type: string
            format: uuid
          description: Уникальный идентификатор задачи
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateCommentRequest'
      responses:
        '201':
          description: Комментарий успешно добавлен
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommentDto'
        '400':
          description: Некорректные входные данные
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Необходима аутентификация
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Доступ запрещен
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Задача не найдена
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    get:
      summary: Получить все комментарии к задаче
      tags:
        - Комментарии
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: taskId
          required: true
          schema:
            type: string
            format: uuid
          description: Уникальный идентификатор задачи
      responses:
        '200':
          description: Список комментариев
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CommentDto'
        '401':
          description: Необходима аутентификация
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Доступ запрещен
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Задача не найдена
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /tasks/{taskId}/comments/{commentId}:
    delete:
      summary: Удалить комментарий к задаче
      tags:
        - Комментарии
      security:
        - bearerAuth: []
      description: |
        **Администратор** может удалять любые комментарии.
        **Пользователь**, добавивший комментарий, может его удалять.
      parameters:
        - in: path
          name: taskId
          required: true
          schema:
            type: string
            format: uuid
          description: Уникальный идентификатор задачи
        - in: path
          name: commentId
          required: true
          schema:
            type: string
            format: uuid
          description: Уникальный идентификатор комментария
      responses:
        '204':
          description: Комментарий успешно удален
        '401':
          description: Необходима аутентификация
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Доступ запрещен
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Задача или комментарий не найдены
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    RegisterRequest:
      type: object
      required:
        - username
        - email
        - password
        - role
      properties:
        username:
          type: string
          maxLength: 40
          example: johndoe
        email:
          type: string
          format: email
          maxLength: 40
          example: johndoe@example.com
        password:
          type: string
          minLength: 6
          maxLength: 20
          pattern: "^(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]{6,20}$"
          example: P@ssw0rd!
          description: |
            Пароль должен быть от 6 до 20 символов и содержать хотя бы одну заглавную букву, одну цифру и один специальный символ.
        role:
          $ref: '#/components/schemas/UserRole'

    LoginRequest:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
          example: johndoe@example.com
        password:
          type: string
          format: password
          example: P@ssw0rd!

    SignUpDto:
      type: object
      properties:
        message:
          type: string
          example: User registered successfully

    SignInDto:
      type: object
      properties:
        tokenType:
          type: string
          example: Bearer
        accessToken:
          type: string
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...

    UserDto:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: "3fa85f64-5717-4562-b3fc-2c963f66afa6"
        username:
          type: string
          example: johndoe
        email:
          type: string
          format: email
          example: johndoe@example.com
        roles:
          type: array
          items:
            $ref: '#/components/schemas/RoleDto'

    RoleDto:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: "1e2d3c4b-5a6f-7e8d-9c0b-1a2d3e4f5g6h"
        name:
          type: string
          enum:
            - USER
            - ADMIN
          example: USER

    TaskDto:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: "4a1b2c3d-4e5f-6g7h-8i9j-0k1l2m3n4o5p"
        title:
          type: string
          example: "Разработка новой фичи"
        description:
          type: string
          example: "Описание задачи по разработке новой функциональности."
        status:
          $ref: '#/components/schemas/TaskStatus'
        priority:
          $ref: '#/components/schemas/TaskPriority'
        authorId:
          type: string
          format: uuid
          example: "5b6c7d8e-9f0a-1b2c-3d4e-5f6g7h8i9j0k"
        assigneeId:
          type: string
          format: uuid
          example: "6c7d8e9f-0a1b-2c3d-4e5f-6g7h8i9j0k1l"
        comments:
          type: array
          items:
            $ref: '#/components/schemas/CommentDto'
        createdAt:
          type: string
          format: date-time
          example: "2024-04-27T12:34:56Z"
        updatedAt:
          type: string
          format: date-time
          example: "2024-04-28T09:15:30Z"

    CreateTaskRequest:
      type: object
      required:
        - title
        - status
        - priority
      properties:
        title:
          type: string
          example: "Разработка новой фичи"
        description:
          type: string
          example: "Описание задачи по разработке новой функциональности."
        status:
          $ref: '#/components/schemas/TaskStatus'
        priority:
          $ref: '#/components/schemas/TaskPriority'
        authorId:
          type: string
          format: uuid
          example: "5b6c7d8e-9f0a-1b2c-3d4e-5f6g7h8i9j0k"
        assigneeId:
          type: string
          format: uuid
          example: "6c7d8e9f-0a1b-2c3d-4e5f-6g7h8i9j0k1l"

    UpdateTaskRequest:
      type: object
      properties:
        title:
          type: string
          example: "Обновление фичи"
        description:
          type: string
          example: "Обновленное описание задачи."
        status:
          $ref: '#/components/schemas/TaskStatus'
        priority:
          $ref: '#/components/schemas/TaskPriority'
        authorId:
          type: string
          format: uuid
          example: "5b6c7d8e-9f0a-1b2c-3d4e-5f6g7h8i9j0k"
        assigneeId:
          type: string
          format: uuid
          example: "6c7d8e9f-0a1b-2c3d-4e5f-6g7h8i9j0k1l"

    TaskStatus:
      type: string
      enum:
        - PENDING
        - IN_PROGRESS
        - COMPLETED
      example: PENDING

    TaskPriority:
      type: string
      enum:
        - LOW
        - MEDIUM
        - HIGH
      example: MEDIUM

    TaskQueryParams:
      type: object
      properties:
        authorId:
          type: string
          format: uuid
          example: "5b6c7d8e-9f0a-1b2c-3d4e-5f6g7h8i9j0k"
        assigneeId:
          type: string
          format: uuid
          example: "6c7d8e9f-0a1b-2c3d-4e5f-6g7h8i9j0k1l"
        operator:
          type: string
          enum:
            - AND
            - OR
          default: AND
          description: Логический оператор для фильтрации (AND | OR)
        page:
          type: integer
          default: 0
          description: Номер страницы (начиная с 0)
        size:
          type: integer
          default: 10
          description: Количество элементов на странице
        sortBy:
          type: string
          default: createdAt
          description: Поле для сортировки
        sortDir:
          type: string
          enum:
            - asc
            - desc
          default: desc
          description: Направление сортировки (asc | desc)

    CommentDto:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: "7a8b9c0d-1e2f-3g4h-5i6j-7k8l9m0n1o2p"
        taskId:
          type: string
          format: uuid
          example: "4a1b2c3d-4e5f-6g7h-8i9j-0k1l2m3n4o5p"
        authorId:
          type: string
          format: uuid
          example: "8b9c0d1e-2f3g-4h5i-6j7k-8l9m0n1o2p3q"
        content:
          type: string
          example: "Это комментарий к задаче."
        createdAt:
          type: string
          format: date-time
          example: "2024-04-27T13:45:30Z"
        updatedAt:
          type: string
          format: date-time
          example: "2024-04-28T10:20:15Z"

    CreateCommentRequest:
      type: object
      required:
        - content
      properties:
        content:
          type: string
          example: "Это комментарий к задаче."

    CommentRequest:
      type: object
      properties:
        content:
          type: string
          example: "Это комментарий к задаче."

    Pageable:
      type: object
      properties:
        sort:
          $ref: '#/components/schemas/Sort'
        offset:
          type: integer
          example: 0
        pageNumber:
          type: integer
          example: 0
        pageSize:
          type: integer
          example: 10
        paged:
          type: boolean
          example: true
        unpaged:
          type: boolean
          example: false

    Sort:
      type: object
      properties:
        sorted:
          type: boolean
          example: true
        unsorted:
          type: boolean
          example: false
        empty:
          type: boolean
          example: false

    ErrorResponse:
      type: object
      additionalProperties:
        type: string

    UserRole:
      type: string
      enum:
        - USER
        - ADMIN
      example: USER
