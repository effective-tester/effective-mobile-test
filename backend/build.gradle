plugins {
    id 'org.springframework.boot' version '3.2.0'
    id 'io.spring.dependency-management' version '1.1.3'
    id 'java'
    id 'jacoco'
}

group = 'ru.effective.tms'
version = '0.0.1-SNAPSHOT'

repositories {
    mavenCentral()
}

jacoco {
    toolVersion = '0.8.12'
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-aop'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.postgresql:postgresql:42.7.2'
    implementation 'org.liquibase:liquibase-core'
    implementation 'io.github.cdimascio:dotenv-java:3.0.0'
    implementation 'org.mapstruct:mapstruct:1.5.5.Final'
    implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
    implementation 'io.jsonwebtoken:jjwt-impl:0.11.5'
    implementation 'io.jsonwebtoken:jjwt-jackson:0.11.5'
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.6.0'

    compileOnly 'org.projectlombok:lombok:1.18.30'

    annotationProcessor 'org.projectlombok:lombok:1.18.30'
    annotationProcessor 'org.mapstruct:mapstruct-processor:1.5.5.Final'

    developmentOnly 'org.springframework.boot:spring-boot-devtools'

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'com.h2database:h2'
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
    options.release = 21
}

tasks.test {
    useJUnitPlatform()
    finalizedBy jacocoTestReport
}

jacocoTestReport {
    dependsOn test
    finalizedBy jacocoTestCoverageVerification
}

jacocoTestReport {
    dependsOn test
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, excludes: [
                    'ru/effective/tms/backend/model/*',
                    'ru/effective/tms/backend/dto/*',
                    'ru/effective/tms/backend/filter/*',
                    'ru/effective/tms/backend/exception/*',
                    'ru/effective/tms/backend/mapper/*',
                    'ru/effective/tms/backend/BackendApplication.class'
            ])
        }))
    }
}

jacocoTestCoverageVerification {
    dependsOn test
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, excludes: [
                    'ru/effective/tms/backend/model/*',
                    'ru/effective/tms/backend/dto/*',
                    'ru/effective/tms/backend/filter/*',
                    'ru/effective/tms/backend/exception/*',
                    'ru/effective/tms/backend/mapper/*',
                    'ru/effective/tms/backend/BackendApplication.class'
            ])
        }))
    }
    violationRules {
        rule {
            element = 'BUNDLE'
            limit {
                counter = 'INSTRUCTION'
                value = 'COVEREDRATIO'
                minimum = 0.80
            }
        }
    }
}

